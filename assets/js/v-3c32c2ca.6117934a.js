"use strict";(self.webpackChunkzerone_docs=self.webpackChunkzerone_docs||[]).push([[175],{8325:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n={key:"v-3c32c2ca",path:"/guide/assets.html",title:"Assets",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Relative URLs",slug:"relative-urls",children:[]},{level:2,title:"Public Files",slug:"public-files",children:[{level:3,title:"Base Helper",slug:"base-helper",children:[]}]},{level:2,title:"Packages and Path Aliases",slug:"packages-and-path-aliases",children:[]}],filePathRelative:"guide/assets.md",git:{updatedTime:1635391738e3,contributors:[{name:"“张智皓”",email:"zhang948498@163.com",commits:1}]}}},343:(e,s,a)=>{a.r(s),a.d(s,{default:()=>T});var n=a(6252);const t=(0,n.uE)('<h1 id="assets" tabindex="-1"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> Assets</h1><h2 id="relative-urls" tabindex="-1"><a class="header-anchor" href="#relative-urls" aria-hidden="true">#</a> Relative URLs</h2><p>You can reference any assets using relative URLs in your Markdown content:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">An image</span>](<span class="token url">./image.png</span>)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This is generally the suggested way to import images, as users usually place images near the Markdown file that references them.</p><h2 id="public-files" tabindex="-1"><a class="header-anchor" href="#public-files" aria-hidden="true">#</a> Public Files</h2><p>You can put some static assets inside public directory, and they will be copied to the root of the generated directory.</p><p>The default public directory is <code>.vuepress/public</code>, which can be changed in config.</p><p>It would be useful in some cases:</p><ul><li>You may need to provide static assets that are not directly referenced in any of your Markdown files, for example, favicon and PWA icons.</li><li>You may need to serve some shared static assets, which may even be referenced outside your site, for example, logo images.</li><li>You may want to reference images using absolute URLs in your Markdown content.</li></ul><p>Take our documentation source files as an example, we are putting the logo of VuePress inside the public directory:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>└─ docs\n   ├─ .vuepress\n   <span class="token operator">|</span>  └─ public\n   <span class="token operator">|</span>     └─ images\n   <span class="token operator">|</span>        └─ hero.png  <span class="token comment"># &lt;- Logo file</span>\n   └─ guide\n      └─ assets.md       <span class="token comment"># &lt;- Here we are</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>We can reference our logo in current page like this:</p><p><strong>Input</strong></p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">VuePress Logo</span>](<span class="token url">/images/hero.png</span>)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Output</strong></p><p><img src="/images/hero.png" alt="VuePress Logo"></p>',17),o={class:"custom-container tip"},l=(0,n._)("p",{class:"custom-container-title"},"TIP",-1),p=(0,n.Uk)("Config reference: "),r=(0,n.Uk)("public"),i=(0,n._)("h3",{id:"base-helper",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#base-helper","aria-hidden":"true"},"#"),(0,n.Uk)(" Base Helper")],-1),c=(0,n.Uk)("If your site is deployed to a non-root URL, i.e. the "),u=(0,n.Uk)("base"),d=(0,n.Uk)(" is not "),m=(0,n._)("code",null,'"/"',-1),g=(0,n.Uk)(", you will need to prepend the "),h=(0,n._)("code",null,"base",-1),b=(0,n.Uk)(" to the absolute URLs of your public files."),k=(0,n.uE)('<p>For example, if you plan to deploy your site to <code>https://foo.github.io/bar/</code>, then <code>base</code> should be set to <code>&quot;/bar/&quot;</code>, and you have to reference your public files in Markdown like this:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">VuePress Logo</span>](<span class="token url">/bar/images/hero.png</span>)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Obviously, it is brittle if you ever decide to change the <code>base</code>. This is the reason why we suggest to reference static assets using relative URLs.</p><p>To help with that, VuePress provides a built-in helper <code>$withBase</code> that generates the correct path:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$withBase(<span class="token punctuation">&#39;</span>/images/hero.png<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VuePress Logo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The helper is verbose in Markdown. So it might be more helpful for theme and plugin authors.</p>',6),f={class:"custom-container tip"},v=(0,n._)("p",{class:"custom-container-title"},"TIP",-1),w=(0,n.Uk)("Config reference: "),y=(0,n.Uk)("base"),_=(0,n.uE)('<h2 id="packages-and-path-aliases" tabindex="-1"><a class="header-anchor" href="#packages-and-path-aliases" aria-hidden="true">#</a> Packages and Path Aliases</h2><p>Although it is not a common usage, you can reference images from dependent packages:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -D package-name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">Image from dependency</span>](<span class="token url">package-name/image.png</span>)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The path aliases that set in config file are also supported:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;@alias&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./path/to/some/dir&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">Image from path alias</span>](<span class="token url">@alias/image.png</span>)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',7),x={class:"custom-container tip"},U=(0,n._)("p",{class:"custom-container-title"},"TIP",-1),P=(0,n.Uk)("Config reference: "),L=(0,n.Uk)("alias"),R={},T=(0,a(3744).Z)(R,[["render",function(e,s){const a=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[t,(0,n._)("div",o,[l,(0,n._)("p",null,[p,(0,n.Wm)(a,{to:"/reference/config.html#public"},{default:(0,n.w5)((()=>[r])),_:1})])]),i,(0,n._)("p",null,[c,(0,n.Wm)(a,{to:"/reference/config.html#base"},{default:(0,n.w5)((()=>[u])),_:1}),d,m,g,h,b]),k,(0,n._)("div",f,[v,(0,n._)("p",null,[w,(0,n.Wm)(a,{to:"/reference/config.html#base"},{default:(0,n.w5)((()=>[y])),_:1})])]),_,(0,n._)("div",x,[U,(0,n._)("p",null,[P,(0,n.Wm)(a,{to:"/reference/config.html#alias"},{default:(0,n.w5)((()=>[L])),_:1})])])],64)}]])},3744:(e,s)=>{s.Z=(e,s)=>{for(const[a,n]of s)e[a]=n;return e}}}]);