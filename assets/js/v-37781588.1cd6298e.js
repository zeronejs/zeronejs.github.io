"use strict";(self.webpackChunkzerone_docs=self.webpackChunkzerone_docs||[]).push([[654],{3308:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-37781588",path:"/zh/guide/getting-started.html",title:"快速上手",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"依赖环境",slug:"依赖环境",children:[]},{level:2,title:"手动安装",slug:"手动安装",children:[]},{level:2,title:"一键生成CURD",slug:"一键生成curd",children:[]}],filePathRelative:"zh/guide/getting-started.md",git:{updatedTime:1635490952e3,contributors:[{name:"“张智皓”",email:"zhang948498@163.com",commits:3}]}}},3934:(n,s,e)=>{e.r(s),e.d(s,{default:()=>f});var a=e(6252);const l=(0,a._)("h1",{id:"快速上手",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#快速上手","aria-hidden":"true"},"#"),(0,a.Uk)(" 快速上手")],-1),t=(0,a._)("h2",{id:"依赖环境",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#依赖环境","aria-hidden":"true"},"#"),(0,a.Uk)(" 依赖环境")],-1),r={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("Node.js v12+"),c=(0,a.uE)('<h2 id="手动安装" tabindex="-1"><a class="header-anchor" href="#手动安装" aria-hidden="true">#</a> 手动安装</h2><p>这一章节会帮助你从头搭建一个简单的 Zerone 基础服务。</p><ul><li><strong>步骤1</strong>: 安装Zerone cli工具并新建项目</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i -g @zeronejs/cli\nzerone new project-name\n<span class="token builtin class-name">cd</span> project-name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>步骤2</strong>: 安装依赖并运行</li></ul>',5),o=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token function"},"yarn"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"yarn"),(0,a.Uk)(" start\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br")])],-1),i=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token function"},"npm"),(0,a.Uk)(),(0,a._)("span",{class:"token function"},"install"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"npm"),(0,a.Uk)(" run start\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br")])],-1),u=(0,a.Uk)("Zerone 会在 "),d={href:"http://localhost:5000",target:"_blank",rel:"noopener noreferrer"},b=(0,a.Uk)("http://localhost:5000"),m=(0,a.Uk)(" 启动一个开发服务器。"),h={href:"http://localhost:5000/api",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("http://localhost:5000/api"),g=(0,a.Uk)(" 启动一个 Swagger 开放api。"),_=(0,a.uE)('<p>现在，你应该已经有了一个简单可用的 Zerone 服务器。</p><h2 id="一键生成curd" tabindex="-1"><a class="header-anchor" href="#一键生成curd" aria-hidden="true">#</a> 一键生成CURD</h2><p>项目创建之后，会携带一个用户表，这一章节将帮助您一键生成接口</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>generate 命令会读取当前目录下的所有 *.entity.ts文件</p><p>需要您进入此文件夹</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src/api/user/entities/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>zerone generate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>紧接着 把 UserModule 导入根模块， 一套简单的CRUD就生成了。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> UserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@api/user/user.module&#39;</span><span class="token punctuation">;</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n        UserModule<span class="token punctuation">,</span>\n        <span class="token comment">// ... 其他模块</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',7),v={},f=(0,e(3744).Z)(v,[["render",function(n,s){const e=(0,a.up)("OutboundLink"),v=(0,a.up)("CodeGroupItem"),f=(0,a.up)("CodeGroup");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,t,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",r,[p,(0,a.Wm)(e)])])]),c,(0,a.Wm)(f,null,{default:(0,a.w5)((()=>[(0,a.Wm)(v,{title:"YARN",active:""},{default:(0,a.w5)((()=>[o])),_:1}),(0,a.Wm)(v,{title:"NPM"},{default:(0,a.w5)((()=>[i])),_:1})])),_:1}),(0,a._)("p",null,[u,(0,a._)("a",d,[b,(0,a.Wm)(e)]),m,(0,a._)("a",h,[k,(0,a.Wm)(e)]),g]),_],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[e,a]of s)n[e]=a;return n}}}]);